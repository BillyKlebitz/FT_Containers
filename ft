[33;1mVECTOR TESTS:
[m[33;1m\\\\\\\\\

[m[32;1mVector iterator test:
[mvector<int>::iterator iter;
vector<int>::const_iterator const_iter;
const_iter = iter;
const_iter == iter: 1
	++iter;
	iter++;
	--iter;
	iter--;
	iter + 5;
	5 + iter;
	iter - 5;
	iter - const_iter;
	const_iter - iter;
	iter += 5;
	iter -= 5;
	iter[5];
no errors -> good
ITERATORS RELATIONAL OPERATORS
iter < const_iter: 0
iter > const_iter: 0
iter <= const_iter: 1
iter >= const_iter: 1
---------------------------------


[32;1mConstructors test:
[m1) first(): size = 0, capacity = 0
2) second(4, 100): size = 4, capacity = 4
	second contains: 100 100 100 100 
3) third(second.begin(),second.end()): size = 4, capacity = 4
	third contains: 100 100 100 100 
4) fourth (third): size = 4, capacity = 4
	fourth contains: 100 100 100 100 
int myints[] = {16,2,77,29}
5) fifth (myints, myints + sizeof(myints) / sizeof(int) )
	fifth contains: 16 2 77 29 


[32;1mDestructor test:
[mvector<SampleClass> vec(5, SampleClass());
	No error and no leaks -> destructor is ok

[32;1mOperator equal test:
[mvector<int> foo (3, 3);
vector<int> bar (5, 5);

bar = foo;
foo = vector<int>();
bar: size = 3, capacity = 5
	bar contains: 3 3 3 
foo: size = 0, capacity = 3
	foo contains: nothing

[32;1mBegin - End test:
[mfor (int i=1; i<=5; i++) myvector.push_back(i);
	myvector contains: 1 2 3 4 5 


[32;1mRbegin - Rend test:
[mint i=0;
vector<int>::reverse_iterator rit = myvector.rbegin();
for (; rit!= myvector.rend(); ++rit)
	*rit = ++i;
	myvector contains: 5 4 3 2 1 


[32;1mSize() test:
[mvector<int> myints;
0. size: 0

for (int i=0; i<10; i++) myints.push_back(i);
1. size: 10

myints.insert (myints.end(), 10, 100);
2. size: 20

myints.pop_back();
3. size: 19

[32;1mMax_size() and capacity() test:
[mSize, max_size and capacity after inserting 100 elems using push_back():
size:		=>100
capacity:	=>128
max_size:	=>4611686018427387903

[32;1mResize test:
[mvector<int> myvector;
for (int i = 1; i < 10; i++) myvector.push_back(i);
myvector.resize(5);
myvector.resize(8,100);
myvector.resize(12);
myvector: size = 12, capacity = 16
	myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0 


Empty test:
total: 55

Reserve test:
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100

operator brackets test:
myvector contains: 9 8 7 6 5 4 3 2 1 0

At test:
myvector contains: 0 1 2 3 4 5 6 7 8 9

Front() test:
myvector.front() is now 62

Back() test:
myvector contains: 10 9 8 7 6 5 4 3 2 1 0

Assign test:
Size of first: 7
Size of second: 5
Size of third: 3

Push_back test:
myvector stores 1000 numbers.

Pop_back test:
The elements of myvector add up to 600

Insert test:
myvector contains: 501 502 503 300 300 400 400 200 100 100 100

Erase test:
myvector contains: 4 5 7 8 9 10

Swap test:
foo contains: 200 200 200 200 200
bar contains: 100 100 100

Clear test:
myvector contains: 100 200 300
myvector contains: 1101 2202

Get_allocator() test:
The allocated array contains: 0 1 2 3 4

Relational operators test:
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar

Swap test:
foo contains: 200 200 200 200 200
bar contains: 100 100 100

[33;1m/////////
[m